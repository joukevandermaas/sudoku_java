import java.io.BufferedReader;
import java.io.Closeable;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.charset.Charset;

/**
 * Abstract class that loads sudokus from files, network or memory.
 * 
 * @version 1.0
 * @author Jouke van der Maas & Koen Keune
 * 
 */
public abstract class Loader implements Closeable {

	protected BufferedReader file;

	/**
	 * Loads a file generated by the debian sudoku package.
	 * @param filename
	 * The file to load. The file must have UTF-16 encoding.
	 * @return
	 * @throws FileNotFoundException
	 */
	public static Loader loadGeneratedFile(String filename)
			throws FileNotFoundException {
		return new GeneratedLoader(new BufferedReader(new InputStreamReader(
				new FileInputStream(filename), Charset.forName("UTF-16"))));
	}

	/**
	 * Loads a premade file where each line contains a sudoku.
	 * @param filename
	 * The file to load.
	 * @return
	 * @throws FileNotFoundException
	 */
	public static Loader loadPremadeFile(String filename)
			throws FileNotFoundException {
		return new PremadeLoader(new BufferedReader(new FileReader(filename)));
	}

	public Loader(BufferedReader file) throws FileNotFoundException {
		this.file = file;
	}

	/**
	 * Loads the next sudoku in the file.
	 * @return
	 * A jagged array (readable by the Sudoku constructor) that represents
	 * the read sudoku, or null if the file contains no more sudokus.
	 * @throws SudokuReaderException
	 * When the sudoku in the file is not valid. After this exception is thrown,
	 * calling getNext() again is not supported and will give unreliable results.
	 * @throws IOException
	 */
	public abstract int[][] getNext() throws SudokuReaderException, IOException;

	@Override
	public void close() throws IOException {
		file.close();
	}

}
